//!Generate Getters and Setters One Getter Selection
//#org.eclipse.cdt.ui.tests.refactoring.gettersandsetters.GenerateGettersAndSettersTest
//@.config
filename=A.h
getters=name
//@A.h
#ifndef A_H_
#define A_H_

class Person {
private:
	int systemId;

protected:
	char* name;

public:
	const int socSecNo;

	Person myFriend;

	Person(int socSecNo); // constructor

	~Person(); // destructor

	char*   Name();

	void	Print();

	int	 /*$*/SocSecNo/*$$*/();

	int	 GetUniqueId();

	int getSystemId() {
		return systemId;
	}

	void setSystemId(int systemId) {
		this->systemId = systemId;
	}
};

int gooo = 1;

#endif /* A_H_ */
//=
#ifndef A_H_
#define A_H_

class Person {
private:
	int systemId;

protected:
	char* name;

public:
	const int socSecNo;

	Person myFriend;

	Person(int socSecNo); // constructor

	~Person(); // destructor

	char*   Name();

	void	Print();

	int	 SocSecNo();

	int	 GetUniqueId();

	int getSystemId() {
		return systemId;
	}

	void setSystemId(int systemId) {
		this->systemId = systemId;
	}

	char* getName() const {
		return name;
	}
};

int gooo = 1;

#endif /* A_H_ */
//@A.cpp
#include "A.h"

int Person::SocSecNo() {
	return socSecNo;
}

int main(int argc, char** argv) {
}
//=
//!Generate Getters and Setters One Getter Selection with Namespace
//#org.eclipse.cdt.ui.tests.refactoring.gettersandsetters.GenerateGettersAndSettersTest
//@.config
filename=A.h
getters=name
//@A.h
#ifndef A_H_
#define A_H_

namespace Personal {

class Person {
private:
	int systemId;

protected:
	char* name;

public:
	const int socSecNo;

	Person myFriend;

	Person(int socSecNo); // constructor

	~Person(); // destructor

	char*   Name();

	void	Print();

	int	 /*$*/SocSecNo/*$$*/();

	int	 GetUniqueId();

	int getSystemId() {
		return systemId;
	}

	void setSystemId(int systemId) {
		this->systemId = systemId;
	}
};

}

int gooo = 1;

#endif /* A_H_ */
//=
#ifndef A_H_
#define A_H_

namespace Personal {

class Person {
private:
	int systemId;

protected:
	char* name;

public:
	const int socSecNo;

	Person myFriend;

	Person(int socSecNo); // constructor

	~Person(); // destructor

	char*   Name();

	void	Print();

	int	 SocSecNo();

	int	 GetUniqueId();

	int getSystemId() {
		return systemId;
	}

	void setSystemId(int systemId) {
		this->systemId = systemId;
	}

	char* getName() const {
		return name;
	}
};

}

int gooo = 1;

#endif /* A_H_ */
//@A.cpp
#include "A.h"

int Person::SocSecNo() {
	return socSecNo;
}

int main(int argc, char** argv) {
}
//=
//!Generate Getters and Setters One Setter Selection
//#org.eclipse.cdt.ui.tests.refactoring.gettersandsetters.GenerateGettersAndSettersTest
//@.config
filename=A.h
setters=name
//@A.h
#ifndef A_H_
#define A_H_

class Person {
private:
	int systemId;

protected:
	char* name;

public:
	const int socSecNo;

	Person myFriend;

	Person(int socSecNo); // constructor

	~Person(); // destructor

	char*   Name();

	void	Print();

	int	 /*$*/SocSecNo/*$$*/();

	int	 GetUniqueId();

	int getSystemId() {
		return systemId;
	}

	void setSystemId(int systemId) {
		this->systemId = systemId;
	}
};

int gooo = 1;

#endif /* A_H_ */
//=
#ifndef A_H_
#define A_H_

class Person {
private:
	int systemId;

protected:
	char* name;

public:
	const int socSecNo;

	Person myFriend;

	Person(int socSecNo); // constructor

	~Person(); // destructor

	char*   Name();

	void	Print();

	int	 SocSecNo();

	int	 GetUniqueId();

	int getSystemId() {
		return systemId;
	}

	void setSystemId(int systemId) {
		this->systemId = systemId;
	}

	void setName(char* name) {
		this->name = name;
	}
};

int gooo = 1;

#endif /* A_H_ */
//@A.cpp
#include "A.h"

int Person::SocSecNo() {
	return socSecNo;
}

int main(int argc, char** argv) {
}
//=
//!Generate Getters and Setters Getter and Setter Selection
//#org.eclipse.cdt.ui.tests.refactoring.gettersandsetters.GenerateGettersAndSettersTest
//@.config
filename=A.h
setters=name
getters=name
//@A.h
#ifndef A_H_
#define A_H_

class Person {
private:
	int systemId;

protected:
	char* name;

public:
	const int socSecNo;

	Person myFriend;

	Person(int socSecNo); // constructor

	~Person(); // destructor

	char*   Name();

	void	Print();

	int	 /*$*/SocSecNo/*$$*/();

	int	 GetUniqueId();

	int getSystemId() {
		return systemId;
	}

	void setSystemId(int systemId) {
		this->systemId = systemId;
	}
};

int gooo = 1;

#endif /* A_H_ */
//=
#ifndef A_H_
#define A_H_

class Person {
private:
	int systemId;

protected:
	char* name;

public:
	const int socSecNo;

	Person myFriend;

	Person(int socSecNo); // constructor

	~Person(); // destructor

	char*   Name();

	void	Print();

	int	 SocSecNo();

	int	 GetUniqueId();

	int getSystemId() {
		return systemId;
	}

	void setSystemId(int systemId) {
		this->systemId = systemId;
	}

	char* getName() const {
		return name;
	}

	void setName(char* name) {
		this->name = name;
	}
};

int gooo = 1;

#endif /* A_H_ */
//@A.cpp
#include "A.h"

int Person::SocSecNo() {
	return socSecNo;
}

int main(int argc, char** argv) {
}
//=
//!Generate Getters and Setters Multiple Selection
//#org.eclipse.cdt.ui.tests.refactoring.gettersandsetters.GenerateGettersAndSettersTest
//@.config
filename=A.h
getters=name,systemId
setters=name,systemId
//@A.h
#ifndef A_H_
#define A_H_

class Person {
private:
	int systemId;

protected:
	char* name;

public:
	const int socSecNo;

	Person myFriend;

	Person(int socSecNo); // constructor

	~Person(); // destructor

	char*   Name();

	void	Print();

	int	 /*$*/SocSecNo/*$$*/();

	int	 GetUniqueId();
};

int gooo = 1;

#endif /* A_H_ */
//=
#ifndef A_H_
#define A_H_

class Person {
private:
	int systemId;

protected:
	char* name;

public:
	const int socSecNo;

	Person myFriend;

	Person(int socSecNo); // constructor

	~Person(); // destructor

	char*   Name();

	void	Print();

	int	 SocSecNo();

	int	 GetUniqueId();

	char* getName() const {
		return name;
	}

	void setName(char* name) {
		this->name = name;
	}

	int getSystemId() const {
		return systemId;
	}

	void setSystemId(int systemId) {
		this->systemId = systemId;
	}
};

int gooo = 1;

#endif /* A_H_ */
//@A.cpp
#include "A.h"

int Person::SocSecNo() {
	return socSecNo;
}

int main(int argc, char** argv) {
}
//=
//!Generate Getters and Setters Visibility order 1
//#org.eclipse.cdt.ui.tests.refactoring.gettersandsetters.GenerateGettersAndSettersTest
//@.config
filename=GaS.h
getters=i,ok
setters=i,ok
//@GaS.h
#ifndef GAS_H_
#define GAS_H_

class GaS {
public:
	GaS();
	virtual ~GaS();
	bool /*$*/ok/*$$*/;
	void method2();

private:
	int i;
};

#endif
//=
#ifndef GAS_H_
#define GAS_H_

class GaS {
public:
	GaS();
	virtual ~GaS();
	bool ok;
	void method2();

	int getI() const {
		return i;
	}

	void setI(int i) {
		this->i = i;
	}

	bool isOk() const {
		return ok;
	}

	void setOk(bool ok) {
		this->ok = ok;
	}

private:
	int i;
};

#endif
//@GaS.cpp
#include "Getters.h"

GaS::Getters() {
}

GaS::~Getters() {
}
//!Generate Getters and Setters no methods
//#org.eclipse.cdt.ui.tests.refactoring.gettersandsetters.GenerateGettersAndSettersTest
//@.config
filename=A.h
getters=id
setters=id
//@A.h
#ifndef A_H_
#define A_H_

class Person {
private:
	int /*$*/id/*$$*/;
};

#endif /* A_H_ */
//=
#ifndef A_H_
#define A_H_

class Person {
public:
	int getId() const {
		return id;
	}

	void setId(int id) {
		this->id = id;
	}

private:
	int id;
};

#endif /* A_H_ */
//!Generate Getters and Setters no methods ascending visibility order
//#org.eclipse.cdt.ui.tests.refactoring.gettersandsetters.GenerateGettersAndSettersTest
//@.config
filename=A.h
getters=i
setters=i
ascendingVisibilityOrder=true
//@A.h
/*
 * test.h
 */

#ifndef TEST_H_
#define TEST_H_

//comment1
class test {
	int /*$*/i/*$$*/; //comment2
	char* b;
	//comment3
};

#endif /* TEST_H_ */
//=
/*
 * test.h
 */

#ifndef TEST_H_
#define TEST_H_

//comment1
class test {
	int i; //comment2
	char* b;
	//comment3

public:
	int getI() const {
		return i;
	}

	void setI(int i) {
		this->i = i;
	}
};

#endif /* TEST_H_ */
//!Generate Getters and Setters no fields
//#org.eclipse.cdt.ui.tests.refactoring.gettersandsetters.GenerateGettersAndSettersTest
//@.config
filename=A.h
fatalerror=true
//@A.h
/*
 * test.h
 */

#ifndef TEST_H_
#define TEST_H_

//comment1
class test {
	void /*$*/test/*$$*/();
	//comment3
};

#endif /* TEST_H_ */
//=
/*
 * test.h
 */

#ifndef TEST_H_
#define TEST_H_

//comment1
class test {
	void test();
	//comment3
};

#endif /* TEST_H_ */
//!Generate Getters and Setters, Pass by Reference, Separate Definition
//#org.eclipse.cdt.ui.tests.refactoring.gettersandsetters.GenerateGettersAndSettersTest
//@.config
filename=A.h
getters=name
setters=name
definitionSeparate=true
//@A.h
#ifndef A_H_
#define A_H_

struct FullName {
	const char* first;
	const char* last;
	FullName(const FullName& other);
	~FullName();
};

class Person {
private:
	int systemId;

protected:
	FullName name;

public:
	const int socSecNo;

	Person myFriend;

	Person(int socSecNo); // constructor

	~Person(); // destructor

	char*   Name();

	void	Print();

	int	 /*$*/SocSecNo/*$$*/();

	int	 GetUniqueId();

	int getSystemId();

	void setSystemId(int systemId);
};

int gooo = 1;

#endif /* A_H_ */
//=
#ifndef A_H_
#define A_H_

struct FullName {
	const char* first;
	const char* last;
	FullName(const FullName& other);
	~FullName();
};

class Person {
private:
	int systemId;

protected:
	FullName name;

public:
	const int socSecNo;

	Person myFriend;

	Person(int socSecNo); // constructor

	~Person(); // destructor

	char*   Name();

	void	Print();

	int	 SocSecNo();

	int	 GetUniqueId();

	int getSystemId();

	void setSystemId(int systemId);
	const FullName& getName() const;
	void setName(const FullName& name);
};

int gooo = 1;

#endif /* A_H_ */
//@A.cpp
#include "A.h"

int Person::SocSecNo() {
	return socSecNo;
}

int main(int argc, char** argv) {
}
//=
#include "A.h"

const FullName& Person::getName() const {
	return name;
}

void Person::setName(const FullName& name) {
	this->name = name;
}

int Person::SocSecNo() {
	return socSecNo;
}

int main(int argc, char** argv) {
}
//!Generate Getters and Setters One Getter Selection with Namespace Separate Definition
//#org.eclipse.cdt.ui.tests.refactoring.gettersandsetters.GenerateGettersAndSettersTest
//@.config
filename=A.h
getters=name
definitionSeparate=true
//@A.h
#ifndef A_H_
#define A_H_

namespace Personal {

class Person {
private:
	int systemId;

protected:
	char* name;

public:
	const int socSecNo;

	Person myFriend;

	Person(int socSecNo); // constructor

	~Person(); // destructor

	char*   Name();

	void	Print();

	int	 /*$*/SocSecNo/*$$*/();

	int	 GetUniqueId();

	int getSystemId() {
		return systemId;
	}

	void setSystemId(int systemId) {
		this->systemId = systemId;
	}
};

}

int gooo = 1;

#endif /* A_H_ */
//=
#ifndef A_H_
#define A_H_

namespace Personal {

class Person {
private:
	int systemId;

protected:
	char* name;

public:
	const int socSecNo;

	Person myFriend;

	Person(int socSecNo); // constructor

	~Person(); // destructor

	char*   Name();

	void	Print();

	int	 SocSecNo();

	int	 GetUniqueId();

	int getSystemId() {
		return systemId;
	}

	void setSystemId(int systemId) {
		this->systemId = systemId;
	}

	char* getName() const;
};

}

int gooo = 1;

#endif /* A_H_ */
//@A.cpp
#include "A.h"

namespace Personal {

int Person::SocSecNo() {
	return socSecNo;
}

} // namespace Personal

int main(int argc, char** argv) {
}
//=
#include "A.h"

namespace Personal {

char* Person::getName() const {
	return name;
}

int Person::SocSecNo() {
	return socSecNo;
}

} // namespace Personal

int main(int argc, char** argv) {
}
//!Generate Getters and Setters One Setter Selection Separate Definition
//#org.eclipse.cdt.ui.tests.refactoring.gettersandsetters.GenerateGettersAndSettersTest
//@.config
filename=A.h
setters=name
definitionSeparate=true
//@A.h
#ifndef A_H_
#define A_H_

class Person {
private:
	int systemId;

protected:
	char* name;

public:
	const int socSecNo;

	Person myFriend;

	Person(int socSecNo); // constructor

	~Person(); // destructor

	char*   Name();

	void	Print();

	int	 /*$*/SocSecNo/*$$*/();

	int	 GetUniqueId();

	int getSystemId() {
		return systemId;
	}

	void setSystemId(int systemId) {
		this->systemId = systemId;
	}
};

int gooo = 1;

#endif /* A_H_ */
//=
#ifndef A_H_
#define A_H_

class Person {
private:
	int systemId;

protected:
	char* name;

public:
	const int socSecNo;

	Person myFriend;

	Person(int socSecNo); // constructor

	~Person(); // destructor

	char*   Name();

	void	Print();

	int	 SocSecNo();

	int	 GetUniqueId();

	int getSystemId() {
		return systemId;
	}

	void setSystemId(int systemId) {
		this->systemId = systemId;
	}

	void setName(char* name);
};

int gooo = 1;

#endif /* A_H_ */
//@A.cpp
#include "A.h"

int Person::SocSecNo() {
	return socSecNo;
}

int main(int argc, char** argv) {
}
//=
#include "A.h"

void Person::setName(char* name) {
	this->name = name;
}

int Person::SocSecNo() {
	return socSecNo;
}

int main(int argc, char** argv) {
}
//!Getter and Setter Selection Separate Definition
//#org.eclipse.cdt.ui.tests.refactoring.gettersandsetters.GenerateGettersAndSettersTest
//@.config
filename=A.h
setters=name
getters=name
definitionSeparate=true
//@A.h
#ifndef A_H_
#define A_H_

class Person {
private:
	int systemId;

protected:
	char* name;

public:
	const int socSecNo;

	Person myFriend;

	Person(int socSecNo); // constructor

	~Person(); // destructor

	char*   Name();

	void	Print();

	int	 /*$*/SocSecNo/*$$*/();

	int	 GetUniqueId();

	int getSystemId() {
		return systemId;
	}

	void setSystemId(int systemId) {
		this->systemId = systemId;
	}
};

int gooo = 1;

#endif /* A_H_ */
//=
#ifndef A_H_
#define A_H_

class Person {
private:
	int systemId;

protected:
	char* name;

public:
	const int socSecNo;

	Person myFriend;

	Person(int socSecNo); // constructor

	~Person(); // destructor

	char*   Name();

	void	Print();

	int	 SocSecNo();

	int	 GetUniqueId();

	int getSystemId() {
		return systemId;
	}

	void setSystemId(int systemId) {
		this->systemId = systemId;
	}

	char* getName() const;
	void setName(char* name);
};

int gooo = 1;

#endif /* A_H_ */
//@A.cpp
#include "A.h"

int Person::SocSecNo() {
	return socSecNo;
}

int main(int argc, char** argv) {
}
//=
#include "A.h"

char* Person::getName() const {
	return name;
}

void Person::setName(char* name) {
	this->name = name;
}

int Person::SocSecNo() {
	return socSecNo;
}

int main(int argc, char** argv) {
}
//!Generate Getters and Setters no Methods Separate Definition
//#org.eclipse.cdt.ui.tests.refactoring.gettersandsetters.GenerateGettersAndSettersTest
//@.config
filename=A.h
getters=id
setters=id
definitionSeparate=true
//@A.h
#ifndef A_H_
#define A_H_

class Person {
private:
	int /*$*/id/*$$*/;
};

#endif /* A_H_ */
//=
#ifndef A_H_
#define A_H_

class Person {
public:
	int getId() const;
	void setId(int id);

private:
	int id;
};

inline int Person::getId() const {
	return id;
}

inline void Person::setId(int id) {
	this->id = id;
}

#endif /* A_H_ */
//!No Methods Separate Definition
//#org.eclipse.cdt.ui.tests.refactoring.gettersandsetters.GenerateGettersAndSettersTest
//@.config
filename=A.h
getters=i
setters=i
definitionSeparate=true
//@A.h
/*
 * test.h
 */

#ifndef TEST_H_
#define TEST_H_

//comment1
class test {
	int /*$*/i/*$$*/; //comment2
	char* b;
	//comment3
};

#endif /* TEST_H_ */
//=
/*
 * test.h
 */

#ifndef TEST_H_
#define TEST_H_

//comment1
class test {
public:
	int getI() const;
	void setI(int i);

private:
	int i; //comment2
	char* b;
	//comment3
};

inline int test::getI() const {
	return i;
}

inline void test::setI(int i) {
	this->i = i;
}

#endif /* TEST_H_ */
//!Bug 323780 "Generate Getters and Setters..." crashes
//#org.eclipse.cdt.ui.tests.refactoring.gettersandsetters.GenerateGettersAndSettersTest
//@.config
filename=Test.h
getters=testField
setters=testField
definitionSeparate=true

//@Test.h
#ifndef TEST_H_
#define TEST_H_

namespace foo {

class Test {
	int /*$*/testField/*$$*/;
	void foo();
};

} // namespace foo

#endif
//=
#ifndef TEST_H_
#define TEST_H_

namespace foo {

class Test {
public:
	int getTestField() const;
	void setTestField(int testField);

private:
	int testField;
	void foo();
};

} // namespace foo

#endif
//@Test.cpp
#include "Test.h"

namespace foo {

void Test::foo() {
}

}
//=
#include "Test.h"

namespace foo {

int Test::getTestField() const {
	return testField;
}

void Test::setTestField(int testField) {
	this->testField = testField;
}

void Test::foo() {
}

}
//!Bug 337040 - Insert definition in empty implementation file (.cxx)
//#org.eclipse.cdt.ui.tests.refactoring.gettersandsetters.GenerateGettersAndSettersTest
//@.config
filename=Test.h
getters=testField
setters=testField
definitionSeparate=true

//@Test.h
#ifndef TEST_H_
#define TEST_H_

class Test {
	int /*$*/testField/*$$*/;
};

#endif
//=
#ifndef TEST_H_
#define TEST_H_

class Test {
public:
	int getTestField() const;
	void setTestField(int testField);

private:
	int testField;
};

#endif
//@Test.cxx

//=
int Test::getTestField() const {
	return testField;
}

void Test::setTestField(int testField) {
	this->testField = testField;
}
//!Bug 337040 - Insert definition in empty implementation file in complex directory structure
//#org.eclipse.cdt.ui.tests.refactoring.gettersandsetters.GenerateGettersAndSettersTest
//@.config
filename=component_b/public_headers/Test.h
getters=testField
setters=testField
definitionSeparate=true

//@component_b/public_headers/Test.h
#ifndef TEST_H_
#define TEST_H_

class Test {
	int /*$*/testField/*$$*/;
};

#endif
//=
#ifndef TEST_H_
#define TEST_H_

class Test {
public:
	int getTestField() const;
	void setTestField(int testField);

private:
	int testField;
};

#endif
//@component_b/implementation/Test.cpp

//=
int Test::getTestField() const {
	return testField;
}

void Test::setTestField(int testField) {
	this->testField = testField;
}
//@component_a/public_headers/Test.h

//=

//@component_a/implementation/Test.cpp

//=

//!Bug 363244 - Generate Getters and Setters for class with macro
//#org.eclipse.cdt.ui.tests.refactoring.gettersandsetters.GenerateGettersAndSettersTest
//@.config
filename=A.h
getters=test
//@A.h
#ifndef A_H_
#define A_H_

#define Typedef \
	typedef int Int

class Test
{
public:
	Typedef;

	void     Foo();
	Test();

	int /*$*/test/*$$*/;
};
#endif /* A_H_ */
//=
#ifndef A_H_
#define A_H_

#define Typedef \
	typedef int Int

class Test
{
public:
	Typedef;

	void     Foo();
	Test();

	int getTest() const {
		return test;
	}

	int test;
};
#endif /* A_H_ */
//!Bug 319278 - Getter for an array field
//#org.eclipse.cdt.ui.tests.refactoring.gettersandsetters.GenerateGettersAndSettersTest
//@.config
filename=A.h
getters=a
//@A.h
#ifndef A_H_
#define A_H_

class A {
private:
	int /*$*/a[2]/*$$*/;
};
#endif /* A_H_ */
//=
#ifndef A_H_
#define A_H_

class A {
public:
	const int* getA() const {
		return a;
	}

private:
	int a[2];
};
#endif /* A_H_ */
//!Bug 352258 - Avoiding reserved names
//#org.eclipse.cdt.ui.tests.refactoring.gettersandsetters.GenerateGettersAndSettersTest
//@.config
filename=A.h
getters=mClass
setters=mClass
//@A.h
#ifndef A_H_
#define A_H_

class getClass {
private:
	int /*$*/mClass/*$$*/;
};
#endif /* A_H_ */
//=
#ifndef A_H_
#define A_H_

class getClass {
public:
	int getClass1() const {
		return mClass;
	}

	void setClass(int _class) {
		mClass = _class;
	}

private:
	int mClass;
};
#endif /* A_H_ */
